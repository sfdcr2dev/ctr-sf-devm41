({
	retrieveRelated: function (component, event) {
		let action = component.get('c.getHeaderRelatedEQCCs');
		action.setParams({ headerId: component.get('v.recordId') });
		action.setCallback(this, function (response) {
			let state = response.getState();
			if (state === 'SUCCESS') {
				let returnValue = response.getReturnValue();
				let checkedSheetsAmount = 0;
				component.set('v.relatedEQCCCheckSheets', returnValue);
				returnValue.forEach((headerSheet) => {
					let headerSheets = headerSheet.sheets;

					headerSheets.forEach((wrapperSheet) => {
						checkedSheetsAmount++;
						if (wrapperSheet.status == 'Pending for approval') {
							component.set('v.hasPendingForApproval', true);
						}
						if (wrapperSheet.isPolluted) {
							component.set('v.isPolluted', true);
						}
					});
					if (checkedSheetsAmount > 1) {
						component.set('v.hasSeveralCheckedSheets', true);
					}
				});

				if (returnValue && returnValue.length > 0) {
					component.set('v.sheetsToSend', returnValue[0]);
				}
			} else if (state === 'INCOMPLETE') {
				// do something
			} else if (state === 'ERROR') {
				let errors = response.getError();
				if (errors) {
					if (errors[0] && errors[0].message) {
						console.error('Error message: ' + errors[0].message);
					}
				} else {
					console.log('Unknown error');
				}
			}
			component.set('v.isLoadingRetrieve', false);
			this.isLoading(component);
		});
		component.set('v.isLoadingRetrieve', true);
		this.isLoading(component);
		$A.enqueueAction(action);
	},

	makeToast: function (type, title, message) {
		var toastEvent = $A.get('e.force:showToast');
		toastEvent.setParams({
			title: title,
			message: message,
			type: type
		});
		toastEvent.fire();
	},

	setNotificationOrderId: function (component, event, helper) {
		let action = component.get('c.getNotificationOrderId');
		action.setParams({
			headerId: component.get('v.recordId')
		});
		action.setCallback(this, function (response) {
			let state = response.getState();
			if (state === 'SUCCESS') {
				let returnValue = response.getReturnValue();
				if (returnValue.Notification__c) {
					component.set('v.notificationId', returnValue.Notification__c);
				}
				if (returnValue.Order__c) {
					component.set('v.orderId', returnValue.Order__c);
				}
				if (returnValue.Order_Operation__c) {
					component.set('v.orderOperationId', returnValue.Order_Operation__c);
				}
			} else if (state === 'INCOMPLETE') {
				// do something
			} else if (state === 'ERROR') {
				let errors = response.getError();
				if (errors) {
					if (errors[0] && errors[0].message) {
						console.error('Error message: ' + errors[0].message);
					}
				} else {
					console.log('Unknown error');
				}
			}
			component.set('v.isLoadingSetNOId', false);
			this.isLoading(component);
		});
		component.set('v.isLoadingSetNOId', true);
		this.isLoading(component);
		$A.enqueueAction(action);
	},

	deleteRecords: function (component, event, helper) {
		let action = component.get('c.deleteManualEQCCHeader');
		action.setParams({
			headerId: component.get('v.recordId')
		});
		action.setCallback(this, function (response) {
			let state = response.getState();
			if (state === 'SUCCESS') {
				let returnValue = response.getReturnValue();
				if (returnValue) {
					helper.makeToast('success', 'Delete Successful', 'Records have successfully been deleted.');
					component.find('navback').navBackJS();
				} else {
					helper.makeToast('error', 'Could Not Delete', 'Can not delete if autogenerated');
				}
			} else if (state === 'INCOMPLETE') {
				// do something
			} else if (state === 'ERROR') {
				let errors = response.getError();
				if (errors) {
					if (errors[0] && errors[0].message) {
						console.error('Error message: ' + errors[0].message);
					}
				} else {
					console.log('Unknown error');
				}
			}
			component.set('v.isLoadingDelete', false);
			this.isLoading(component);
		});
		component.set('v.isLoadingDelete', true);
		this.isLoading(component);

		$A.enqueueAction(action);
	},

	isLoading: function (component) {
		var isLoadingRetrieve = component.get('v.isLoadingRetrieve');
		var isLoadingSetNOId = component.get('v.isLoadingSetNOId');
		var isLoadingDelete = component.get('v.isLoadingDelete');
		var isLoading = isLoadingRetrieve || isLoadingSetNOId || isLoadingDelete;
		component.set('v.isLoading', isLoading);
	},

	checkOwnerOrAdmin: function (component) {
		let action = component.get('c.isOwnerOrAdmin');
		const recordId = component.get('v.recordId');
		action.setParams({
			headerId: recordId
		});

		action.setCallback(this, function (response) {
			let state = response.getState();

			if (state === 'SUCCESS') {
				component.set('v.ownerOrAdmin', response.getReturnValue());
			} else if (state === 'INCOMPLETE') {
				// do something
			} else if (state === 'ERROR') {
				let errors = response.getError();
				if (errors) {
					if (errors[0] && errors[0].message) {
						console.error('Error message: ' + errors[0].message);
					}
				} else {
					console.log('Unknown error');
				}
			}
		});

		$A.enqueueAction(action);
	}
});