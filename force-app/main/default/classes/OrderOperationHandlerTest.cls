/**
 * @author Oktana
 * @description test class for OrderOperationHandler
 */
@isTest
public with sharing class OrderOperationHandlerTest {
    @testSetup
    static void setup() {
        Checked_Sheet_Pointer__mdt formType = [
            SELECT Id, MasterLabel, DeveloperName
            FROM Checked_Sheet_Pointer__mdt
            WHERE DeveloperName = 'Tank_Gauge_Level_Maintenance_Record'
            LIMIT 1
        ];

        EQCC_Header__c header = new EQCC_Header__c();
        insert header;

        EQCC_Checked_Sheet__c eqccCheckSheet = new EQCC_Checked_Sheet__c();
        eqccCheckSheet.Sheet_Code__c = 'testCode';
        eqccCheckSheet.Form_Type__c = formType.DeveloperName;
        eqccCheckSheet.Group_Task__c = 'GROUPTASK';
        eqccCheckSheet.Group_Count__c = 'GROUPCOUNT';
        eqccCheckSheet.Operation__c = 'OPERATION';
        insert eqccCheckSheet;

        EQCC_Checked_Sheet__c secondCheckSheet = new EQCC_Checked_Sheet__c();
        secondCheckSheet.Sheet_Code__c = 'secondCode';
        secondCheckSheet.Form_Type__c = formType.DeveloperName;
        secondCheckSheet.Group_Task__c = 'GROUPTASK';
        secondCheckSheet.Group_Count__c = 'GROUPCOUNT';
        secondCheckSheet.Operation__c = 'OPERATION';
        insert secondCheckSheet;

        Header_Sheet__c headerSheet = new Header_Sheet__c();
        headerSheet.Header__c = header.Id;
        headerSheet.Sheet__c = eqccCheckSheet.Id;
        insert headerSheet;

        Header_Sheet__c secondHeaderSheet = new Header_Sheet__c();
        secondHeaderSheet.Header__c = header.Id;
        secondHeaderSheet.Sheet__c = secondCheckSheet.Id;
        insert secondHeaderSheet;
    }

    /**
     * @given a new Order of Type 'SH01' with Operations and Checked Sheets with the same Group Task
     * @and Group Count than the Order and the same Operation than the Operations
     * @when the Order_Operation is inserted
     * @then new EQCC_Header__c should be created for every pair Order - Operations
     * @and the Checked Sheets should be associated to the Headers as Autogenerated (Manually Created = false)
     */
    @isTest
    static void testAutogeneratedHeaderSheetWhenOrderSH() {
        Sheet_Mapping__c mapping = new Sheet_Mapping__c(
            Group_Count__c = 'GROUPCOUNT',
            Group_Task__c = 'GROUPTASK',
            Operation_Text__c = 'OPERATION',
            Form_Code__c = 'testCode'
        );
        insert mapping;

        Order__c order = new Order__c(
            Name = '12345678',
            Order_Type__c = Constants.ORDERS.TYPE_SH,
            grouptask__c = 'GROUPTASK',
            groupcount__c = 'GROUPCOUNT'
        );
        insert order;

        List<Order_Operation__c> orderOperations = new List<Order_Operation__c>{
            new Order_Operation__c(Order__c = order.Id, Operation_Text__c = 'OPERATION'),
            new Order_Operation__c(Order__c = order.Id, Operation_Text__c = 'NOTAUTOGENERATE')
        };

        List<Header_Sheet__c> initialHeaderSheets = getHeaderSheets();
        List<EQCC_Header__c> initialHeaders = getHeaders();

        Test.startTest();
        insert orderOperations;
        Test.stopTest();

        List<Header_Sheet__c> finalHeaderSheets = getHeaderSheets();
        List<EQCC_Header__c> finalHeaders = getHeaders();

//        System.assertEquals(
//            initialHeaderSheets.size() + 1,
//            finalHeaderSheets.size(),
//            'Two new autogenerated Header Sheets should have been created'
//        );
//
//        System.assertEquals(
//            initialHeaders.size() + 1,
//            finalHeaders.size(),
//            'Only headers with sheets can be autogenerated'
//        );
    }

    /**
     * @given a new Order of Type 'PM01' with Operations and Checked Sheets with the same Group Task
     * @and Group Count than the Order and the same Operation than the Operations
     * @when the Order_Operation is inserted
     * @then new EQCC_Header__c should be created for every pair Order - Operations
     * @and the Checked Sheets should be associated to the Headers as Autogenerated (Manually Created = false)
     */
    @isTest
    static void testAutogeneratedHeaderSheetWhenOrderPM() {
        Sheet_Mapping__c mapping = new Sheet_Mapping__c(
            Group_Count__c = 'GROUPCOUNT',
            Group_Task__c = 'GROUPTASK',
            Operation_Text__c = 'OPERATION',
            Form_Code__c = 'secondCode'
        );
        insert mapping;

        Order__c order = new Order__c(
            Name = '12345678',
            Order_Type__c = Constants.ORDERS.TYPE_PM,
            grouptask__c = 'GROUPTASK',
            groupcount__c = 'GROUPCOUNT'
        );
        insert order;

        List<Order_Operation__c> orderOperations = new List<Order_Operation__c>{
            new Order_Operation__c(Order__c = order.Id, Operation_Text__c = 'OPERATION')
        };

        List<Header_Sheet__c> initialHeaderSheets = getHeaderSheets();
        List<EQCC_Header__c> initialHeaders = getHeaders();

        Test.startTest();
        insert orderOperations;
        Test.stopTest();

        List<Header_Sheet__c> finalHeaderSheets = getHeaderSheets();
        List<EQCC_Header__c> finalHeaders = getHeaders();

//        System.assertEquals(
//            initialHeaderSheets.size() + 1,
//            finalHeaderSheets.size(),
//            'Two new autogenerated Header Sheets should have been created'
//        );
//        System.assertEquals(
//            initialHeaders.size() + 1,
//            finalHeaders.size(),
//            'Only headers with sheets can be autogenerated'
//        );
    }

    /**
     * @given a new Order of Type different than 'SH01' and 'PM01' with Operations
     * @and Checked Sheets with the same Group Task and Group Count than the Order
     * @and the same Operation than the Operations
     * @when the Order_Operation is inserted
     * @then no new Header Sheets should be created
     */
    @isTest
    static void testAutogeneratedHeaderSheetWhenOrderCM() {
        Sheet_Mapping__c mapping = new Sheet_Mapping__c(
            Group_Count__c = 'GROUPCOUNT',
            Group_Task__c = 'GROUPTASK',
            Operation_Text__c = 'OPERATION',
            Form_Code__c = 'testCode'
        );
        insert mapping;

        List<Operation__c> operations = new List<Operation__c>();
        operations.add(new Operation__c(Operation__c = 'OPERATION', Control_Key__c = 'KEY'));
        operations.add(new Operation__c(Operation__c = 'OPERATION', Control_Key__c = 'KEY'));
        insert operations;
        Set<Id> operationIds = new Set<Id>{ operations.get(0).Id, operations.get(1).Id };

        Order__c order = new Order__c(
            Name = '12345678',
            Order_Type__c = Constants.ORDERS.TYPE_CM,
            grouptask__c = 'GROUPTASK',
            groupcount__c = 'GROUPCOUNT'
        );
        insert order;

        List<Order_Operation__c> orderOperations = new List<Order_Operation__c>{
            new Order_Operation__c(
                Order__c = order.Id,
                Operation__c = operations.get(0).Id,
                Operation_Text__c = 'OPERATION',
                SubOperation__c = 'Sub1'
            ),
            new Order_Operation__c(
                Order__c = order.Id,
                Operation__c = operations.get(1).Id,
                Operation_Text__c = 'OPERATION',
                SubOperation__c = 'Sub2'
            )
        };

        List<Header_Sheet__c> initialHeaderSheets = getHeaderSheets();
        List<EQCC_Header__c> initialHeaders = getHeaders();

        Test.startTest();
        insert orderOperations;
        Test.stopTest();

        List<Header_Sheet__c> finalHeaderSheets = getHeaderSheets();
        List<EQCC_Header__c> finalHeaders = getHeaders();

        System.assertEquals(
            initialHeaderSheets.size(),
            finalHeaderSheets.size(),
            'No new autogenerated Header Sheets should have been created'
        );
        System.assertEquals(
            initialHeaders.size(),
            finalHeaders.size(),
            'Only headers with sheets can be autogenerated'
        );
    }

    /**
     * @when the Order_Operation is inserted
     * @then Order_Operation__c field (external Id) will be populated with
        order__c.Name +
        orderOperation.Operation_Text__c +
        orderOperation.SubOperation__c;
     */
    @isTest
    static void testPopulateExternalId() {
        Order__c order = new Order__c();
        order.Name = 'Order Test';
        order.Order_Number__c = '1234';
        order.Order_Type__c = 'PJ01';
        order.Order_Status__c = 'New';
        order.System_Status_Text__c = 'CRTD';
        insert order;

        Order_Operation__c orderOperation = new Order_Operation__c();
        orderOperation.Operation_Text__c = 'Test Text';
        orderOperation.SubOperation__c = 'Sub Op Test';
        orderOperation.Order__c = order.Id;

        Test.startTest();
        insert orderOperation;
        Test.stopTest();

        Order_Operation__c insertedOrderOperation = [
            SELECT Id, OrderOperation__c
            FROM Order_Operation__c
            WITH SECURITY_ENFORCED
            LIMIT 1
        ];

//        System.assertEquals(
//            order.Name +
//            orderOperation.Operation_Text__c +
//            orderOperation.SubOperation__c,
//            insertedOrderOperation.OrderOperation__c,
//            'Order Operation external Id does not match'
//        );
    }

    /**
     * @when the Order_Operation is inserted
     * @then Order_Operation__c field (external Id) will be populated with
        order__c.Name +
        orderOperation.Operation_Text__c +
        orderOperation.SubOperation__c;
     */
    @isTest
    static void testPopulateExternalIdWithNoSubOperation() {
        Order__c order = new Order__c();
        order.Name = 'Order Test';
        order.Order_Number__c = '1234';
        order.Order_Type__c = 'PJ01';
        order.Order_Status__c = 'New';
        order.System_Status_Text__c = 'CRTD';
        insert order;

        Order_Operation__c orderOperation = new Order_Operation__c();
        orderOperation.Operation_Text__c = 'Test Text';
        orderOperation.Order__c = order.Id;

        Test.startTest();
        insert orderOperation;
        Test.stopTest();

        Order_Operation__c insertedOrderOperation = [
            SELECT Id, OrderOperation__c
            FROM Order_Operation__c
            WITH SECURITY_ENFORCED
            LIMIT 1
        ];

//        System.assertEquals(
//            order.Name +
//            orderOperation.Operation_Text__c +
//            '',
//            insertedOrderOperation.OrderOperation__c,
//            'Order Operation external Id does not match'
//        );
    }

    private static List<Header_Sheet__c> getHeaderSheets() {
        return [SELECT Id FROM Header_Sheet__c WHERE isManuallyCreated__c = FALSE WITH SECURITY_ENFORCED];
    }

    private static List<EQCC_Header__c> getHeaders() {
        return [SELECT Id FROM EQCC_Header__c WITH SECURITY_ENFORCED];
    }
}