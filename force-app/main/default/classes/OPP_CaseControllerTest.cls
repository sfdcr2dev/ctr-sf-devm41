@isTest
public class OPP_CaseControllerTest {
    @TestSetup
    static void makeData() {
        List<User> users = [SELECT Id, Email FROM User WHERE IsActive = true AND Email <> null and Profile.Name = 'Non Operation' LIMIT 3];

        List<Group> groupsLst = [SELECT Id FROM Group WHERE DeveloperName IN ('Authorization_Focal_Point', 'DG_Team_Lead_Authorization')];
        if(groupsLst.size() == 0) {
            groupsLst = new List<Group>{
                new Group(Name='Authorization_Focal_Point', DeveloperName='Authorization_Focal_Point', Type='Queue'),
                new Group(Name='DG_Team_Lead_Authorization', DeveloperName='DG_Team_Lead_Authorization', Type='Queue')
            };
            insert groupsLst;
        }
        insert new List<GroupMember>{
            new GroupMember(GroupId = groupsLst.get(0).Id, UserOrGroupId = users.get(0).Id),
            new GroupMember(GroupId = groupsLst.get(1).Id, UserOrGroupId = users.get(1).Id)
        };


        System.runAs(users.get(0)) {

        insert new PISUsers__c(
            User__c = users.get(1)?.Id,
            EMAIL__c = users.get(1)?.Email,
            ReportToUser__c = users.get(2)?.Id,
            HOLDERPOSITION__c = '60001740',
            Active__c = True,
            MAINPOSITION__c = True
        );
        Case testCase = new Case(
            Objective__c = 'TestCase001',
            Location__c = 'OPP Salesforce',
            Requester__c = Userinfo.getUserId(),
            Authorization_Category__c = 'SAP Account',
            User_Type__c = 'Employee',
            Status = 'Draft',
            Borrow_Period_Start_date__c = Date.today(),
            Borrow_Period_End_date__c = Date.today(),
            //RecordTypeId = Case.SObjectType.getDescribe().getRecordTypeInfosByDeveloperName().get('Authorization_SAP_Account').getRecordTypeId()
            RecordTypeId = Case.SObjectType.getDescribe().getRecordTypeInfosByDeveloperName().get('Staff_AUTH_SAP').getRecordTypeId()
        );
        insert testCase;
        OPP_IT_Asset__c itAsset = new OPP_IT_Asset__c(
            WinNo_Reference_key__c = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ',
            IsPoolUser__c = true
        );
        insert itASset;
        OPP_CaseController.saveCaseLineItem(new List<OPP_Case_Line_Items__c>{new OPP_Case_Line_Items__c(
            Case__c = testCase.Id,
            Authority_Request__c = 'SAP',
            Asset_Owner__c = users.get(1)?.Id,
            //RecordTypeId = OPP_Case_Line_Items__c.SObjectType.getDescribe().getRecordTypeInfosByDeveloperName().get('Authorization_SAP_Account').getRecordTypeId(),
            RecordTypeId = OPP_Case_Line_Items__c.SObjectType.getDescribe().getRecordTypeInfosByDeveloperName().get('Staff_AUTH_SAP').getRecordTypeId(),
            New_WinNo__c = itASset.Id,
            Is_Summited_PMAsset__c = false
        )}, testCase.Id);
        insert new OPP_Application__c(
            Name = 'DG Service',
            Notification__c = true
        );
        }

    }

    private static String imgBase64 {
        get {
            return '';
        }
    }

    @IsTest
    static void Initialize() {

        Test.startTest();
        OPP_CaseController.getAuthorizationCase();
        OPP_CaseController.getIncidentCase();
        OPP_CaseController.getOtherCase();
        OPP_CaseController.getHardwareCase();
        OPP_CaseController.getSoftwareCase();
        OPP_CaseController.getProjectCase();
        OPP_CaseController.getITStationeryCase();

        Case testCase = OPP_CaseController.getCaseById([SELECT Id FROM Case LIMIT 1]?.Id);
        OPP_CaseController.uploadFile(imgBase64, 'filename', testCase.Id);
        update new Case(
            Id = testCase.Id,
            Status = 'Waiting for Manager Approval'
        );
        update new Case(
            Id = testCase.Id,
            Status = 'Waiting for Auth Focal Point Approval'
        );
        try {
        update new Case(
            Id = testCase.Id,
            Status = 'Waiting for DG Approval'
        );
        } catch (Exception e) {}

        OPP_CaseController.getCaseLineItemByCaseId(null);
        OPP_CaseController.deleteDGRequestCaseById(testCase.Id);

        // Case testCase2 = OPP_CaseController.getCaseById([SELECT Id FROM Case WHERE RecordType.DeveloperName = 'Software_Catalog' LIMIT 1]?.Id);
        // update new Case(
        //     Id = testCase2.Id,
        //     Status = 'Waiting for Manager Approval'
        // );

        OPP_CaseController.getCaseRecordTpyeInfoes();
        OPP_CaseController.getCaseLineItemRecordTpyeInfoes();
        OPP_CaseController.getCasePicklistValues('Case', 'Status');
        // OPP_CaseController.getPicklistValuesITAsset();
        OPP_CaseController.getPicklistValuesSoftwareAsset();
        OPP_CaseController.getDescribeFieldResult('Case', new List<String>{'CaseNumber', 'Objective__c'});

        OPP_CaseController.getPicklistValuesITAsset('');
        OPP_CaseController.getPicklistValuesITAsset('005xxxxxxxxxxxx');
        Test.stopTest();

    }
    @IsTest
    static void Initialize_Failure() {
        Test.startTest();
        try {
            OPP_CaseController.getCasePicklistValues('Case', 'ABC');
        } catch (Exception e) {

        }
        Test.stopTest();
    }
    @IsTest
    static void test_CalloutServiceUpdateDataAsset() {
        Test.startTest();

        OPP_Case_Line_Items__c testRequestItem = [SELECT Id, Case__c FROM OPP_Case_Line_Items__c LIMIT 1];
        Test.setMock(HttpCalloutMock.class, new MockHttpResponseTest(200,
            '{"Result":{"IsSuccess":true,"Message":"Test Message","CaseLineItemID":"'+testRequestItem.Id+'"},"Data":{}}'
        ));
        OPP_CaseController.calloutUpdateDataAsset([SELECT Id FROM Case LIMIT 1]?.Id);
        OPP_IT_Asset__c itAsset = new OPP_IT_Asset__c(
            WinNo_Reference_key__c = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ-2',
            IsPoolUser__c = true
        );
        insert itASset;
        
        //return Database.getQueryLocator([SELECT Id, Case__c, Case__r.Borrow_Period_Start_date__c,Case__r.Borrow_Period_End_date__c,Asset_Owner__c,Asset_Owner__r.Email,New_WinNo__c,
                      //   New_WinNo__r.WinNo_Reference_key__c, New_WinNo__r.IsPoolUser__c,OPP_IT_Asset__r.WinNo_Reference_key__c,Is_Summited_PMAsset__c, IsForceChange__c
                      //    FROM OPP_Case_Line_Items__c WHERE Case__r.RecordType.Name LIKE 'Hardware%' 
                      //    AND Case__r.Status = 'In Progress'AND Is_Summited_PMAsset__c = false AND New_WinNo__c <> null ORDER BY CreatedDate ASC]);
    
        
        update new OPP_Case_Line_Items__c(
            Id = testRequestItem.Id,
            New_WinNo__c = itASset.Id,
            Is_Summited_PMAsset__c = false
        );
        update new Case(
            Id = testRequestItem.Case__c,
            RecordTypeId = Case.SObjectType.getDescribe().getRecordTypeInfosByDeveloperName().get('Hardware_Catalog').getRecordTypeId(),
            //RecordTypeId = Case.SObjectType.getDescribe().getRecordTypeInfosByDeveloperName().get('Staff_HW').getRecordTypeId(),
            Status = 'In Progress'
        );
        System.debug([SELECT Case__r.RecordType.Name,
                        Case__r.Status,
                        Is_Summited_PMAsset__c,
                        New_WinNo__c,
						Asset_Owner__c
            FROM OPP_Case_Line_Items__c
            // WHERE Case__r.RecordType.Name LIKE 'Hardware%' AND Case__r.Status = 'In Progress'
            //     AND Is_Summited_PMAsset__c = false
            //     AND New_WinNo__c <> null
            ORDER BY CreatedDate ASC]);
        // try {

        // } catch (DMLException e) {
        //     System.debug(System.LoggingLevel.ERROR, e.getMessage());
        //     System.debug(System.LoggingLevel.ERROR, e.getDmlMessage(0));
        // }

        Database.executeBatch(new OPP_UpdateDataAssetBatch(), 200);
        System.schedule('OPP_UpdateDataAssetSchedule',
            '0 0 0 18 12 ? 2023',
            new OPP_UpdateDataAssetSchedule());
        Test.stopTest();
    }
    @IsTest
    static void test_CalloutServiceITAsset() {
        Test.startTest();

        Test.setMock(HttpCalloutMock.class, new MockHttpResponseTest(200,
            '{"Result":{"IsSuccess":true,"Message":null,"CaseLineItemID":null},"Data":{"Data":[{"ASSETCATEGOTY":"Hardware","ASSETTYPE":"Notebook","WINNO":"002_TEST_HW","EMAIL":"Phatcharanan@thaioilgroup.com_xx","AssetStatus":"Active","IsDelete":false},{"ASSETCATEGOTY":"Hardware","ASSETTYPE":"Notebook","WINNO":"003_TEST_HW","EMAIL":"Phatcharanan@thaioilgroup.com_xx","AssetStatus":"Active","IsDelete":false}]}}'
        ));
        OPP_CalloutPMAssetService.calloutITAsset();
        Database.executeBatch(new OPP_ITAssetBatch(), 200);
        System.schedule('OPP_ITAssetSchedule',
            '0 0 0 18 12 ? 2023',
            new OPP_ITAssetSchedule());

        Test.stopTest();
    }

    @IsTest
    static void test_CalloutServiceSoftwareAsset() {
        Test.startTest();

        Test.setMock(HttpCalloutMock.class, new MockHttpResponseTest(200,
            '{"Result":{"IsSuccess":true,"Message":null,"CaseLineItemID":null},"Data":{"Data":[{"LICENSETYPE":"PC Standard Software","PARENTREFERENCEID":"00004028","PARENTSOFTWARENAME":"3uTools","CHILDSOFTWARENAME":"3uTools","CHILDSOFTWAREVERSION":"2.53.010","LASTESTUNITPRICE":"1000","LASTESTUNITPRICECURR":"THB","ReferenceID":"00004028_00000019","ParentLicenseAmt":43,"ParentCountLicense":true,"IsDelete":false},{"LICENSETYPE":"PC Standard Software","PARENTREFERENCEID":"00004028","PARENTSOFTWARENAME":"3uTools","CHILDSOFTWARENAME":"3uTools","CHILDSOFTWAREVERSION":"2.37.007","LASTESTUNITPRICE":"1000","LASTESTUNITPRICECURR":"THB","ReferenceID":"00004028_00000020","ParentLicenseAmt":43,"ParentCountLicense":true,"IsDelete":false}]}}'
        ));
        OPP_CalloutPMAssetService.calloutSoftwareAsset();
        Database.executeBatch(new OPP_SoftwareAssetBatch(), 200);
        System.schedule('OPP_SoftwareAssetSchedule',
            '0 0 0 18 12 ? 2023',
            new OPP_SoftwareAssetSchedule());

        Test.stopTest();
    }
    
    @isTest
    static void testCaseLineItem() {
        Test.startTest();
        
        List<User> users = [SELECT Id, Email FROM User WHERE IsActive = true AND Email <> null LIMIT 2];
        OPP_IT_Asset__c itasset = new OPP_IT_Asset__c(
            Name = 'WIN-NO-001',
            WinNo_Reference_key__c = 'WIN-NO-001',
            Asset_Category__c = 'Hardware',
            Asset_Type__c = 'Computer',
            Asset_Status__c = 'Active',
            IsPoolUser__c = true,
            IsDelete_By_PM_Asset__c = false,
            Email__c = users.get(0).Email,
            User__c = users.get(0).Id
        );
        OPP_IT_Asset__c itasset2 = new OPP_IT_Asset__c(
            Name = 'WIN-NO-001',
            WinNo_Reference_key__c = 'WIN-NO-002',
            Asset_Category__c = 'Hardware',
            Asset_Type__c = 'Computer',
            Asset_Status__c = 'Active',
            IsPoolUser__c = true,
            IsDelete_By_PM_Asset__c = false,
            Email__c = users.get(0).Email,
            User__c = users.get(0).Id
        );
        insert new List<OPP_IT_Asset__c>{ itasset, itasset2 };
        Case testCase2 = new Case(
            Objective__c = 'TestCase002',
            Location__c = 'OPP Salesforce',
            Requester__c = Userinfo.getUserId(),
            Status = 'Draft',
            //RecordTypeId = Case.SObjectType.getDescribe().getRecordTypeInfosByDeveloperName().get('Hardware_Catalog').getRecordTypeId()
            RecordTypeId = Case.SObjectType.getDescribe().getRecordTypeInfosByDeveloperName().get('Staff_HW').getRecordTypeId()
        );
        insert testCase2;
        OPP_Case_Line_Items__c caseLineItem = new OPP_Case_Line_Items__c(
            Case__c = testCase2.Id,
            New_WinNo__c = itasset.Id,
            Asset_Owner__c = users.get(0)?.Id,
            //RecordTypeId = OPP_Case_Line_Items__c.SObjectType.getDescribe().getRecordTypeInfosByDeveloperName().get('Hardware_Catalog').getRecordTypeId()
            RecordTypeId = OPP_Case_Line_Items__c.SObjectType.getDescribe().getRecordTypeInfosByDeveloperName().get('Staff_HW').getRecordTypeId()
        );
        insert caseLineItem;
        update new OPP_Case_Line_Items__c(
            Id = caseLineItem.Id,
            New_WinNo__c = itasset2.Id
        );
        update new Case(
            Id = testCase2.Id,
            Status = 'In Progress'
        );

        try {
            update new Case(
                Id = testCase2.Id,
                Status = 'Draft'
            );
            User u = [SELECT Id, Profile.Name FROM User WHERE Profile.Name = 'Operation' LIMIT 1];
            // System.debug(u.Profile.Name);
            System.runAs(u) {
                delete caseLineItem;
            }
        } catch (Exception e) {}
        Test.stopTest();
    }
    
    @isTest
    static void testRequesterType() {
        Test.startTest();
        List<PISUsers__c> pis = [SELECT Id, User__r.Id FROM PISUsers__c WHERE Active__c = true LIMIT 1];
        OPP_CaseController.requesterType(pis.get(0).User__r.Id);
        Test.stopTest();
    }
    
    
}